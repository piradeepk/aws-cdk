Resources:
  MyVpcF9F0CA6F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/Resource
  MyVpcPublicSubnet1SubnetF6608456:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/19
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: dummy1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1/Subnet
  MyVpcPublicSubnet1RouteTableC46AB2F4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1/RouteTable
  MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1/RouteTableAssociation
  MyVpcPublicSubnet1DefaultRoute95FDF9EB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1/DefaultRoute
  MyVpcPublicSubnet1EIP096967CB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1/EIP
  MyVpcPublicSubnet1NATGatewayAD3400C1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet1EIP096967CB
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet1/NATGateway
  MyVpcPublicSubnet2Subnet492B6BFB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.32.0/19
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: dummy1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2/Subnet
  MyVpcPublicSubnet2RouteTable1DF17386:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2/RouteTable
  MyVpcPublicSubnet2RouteTableAssociation227DE78D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2/RouteTableAssociation
  MyVpcPublicSubnet2DefaultRoute052936F6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2/DefaultRoute
  MyVpcPublicSubnet2EIP8CCBA239:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2/EIP
  MyVpcPublicSubnet2NATGateway91BFBEC9:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet2EIP8CCBA239
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet2/NATGateway
  MyVpcPublicSubnet3Subnet57EEE236:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/19
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: dummy1c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3/Subnet
  MyVpcPublicSubnet3RouteTable15028F08:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3/RouteTable
  MyVpcPublicSubnet3RouteTableAssociation5C27DDA4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet3RouteTable15028F08
      SubnetId:
        Ref: MyVpcPublicSubnet3Subnet57EEE236
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3/RouteTableAssociation
  MyVpcPublicSubnet3DefaultRoute3A83AB36:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet3RouteTable15028F08
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3/DefaultRoute
  MyVpcPublicSubnet3EIPC5ACADAB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3/EIP
  MyVpcPublicSubnet3NATGatewayD4B50EBE:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet3EIPC5ACADAB
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet3Subnet57EEE236
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PublicSubnet3/NATGateway
  MyVpcPrivateSubnet1Subnet5057CF7E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.96.0/19
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: dummy1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet1/Subnet
  MyVpcPrivateSubnet1RouteTable8819E6E2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet1/RouteTable
  MyVpcPrivateSubnet1RouteTableAssociation56D38C7E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      SubnetId:
        Ref: MyVpcPrivateSubnet1Subnet5057CF7E
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet1/RouteTableAssociation
  MyVpcPrivateSubnet1DefaultRouteA8CDE2FA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet1NATGatewayAD3400C1
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet1/DefaultRoute
  MyVpcPrivateSubnet2Subnet0040C983:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/19
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: dummy1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet2/Subnet
  MyVpcPrivateSubnet2RouteTableCEDCEECE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet2/RouteTable
  MyVpcPrivateSubnet2RouteTableAssociation86A610DA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      SubnetId:
        Ref: MyVpcPrivateSubnet2Subnet0040C983
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet2/RouteTableAssociation
  MyVpcPrivateSubnet2DefaultRoute9CE96294:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet2NATGateway91BFBEC9
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet2/DefaultRoute
  MyVpcPrivateSubnet3Subnet772D6AD7:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.160.0/19
      VpcId:
        Ref: MyVpcF9F0CA6F
      AvailabilityZone: dummy1c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet3
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet3/Subnet
  MyVpcPrivateSubnet3RouteTableB790927C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet3
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet3/RouteTable
  MyVpcPrivateSubnet3RouteTableAssociationD951741C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet3RouteTableB790927C
      SubnetId:
        Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet3/RouteTableAssociation
  MyVpcPrivateSubnet3DefaultRouteEC11C0C5:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet3RouteTableB790927C
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet3NATGatewayD4B50EBE
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/PrivateSubnet3/DefaultRoute
  MyVpcIGW5C4A4F63:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/MyVpc
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/IGW
  MyVpcVPCGW488ACE0D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVpcF9F0CA6F
      InternetGatewayId:
        Ref: MyVpcIGW5C4A4F63
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/MyVpc/VPCGW
  EcsCluster97242B84:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/Resource
  EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource
  EcsClusterDefaultAutoScalingGroupInstanceRole3C026863:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/InstanceRole/Resource
  EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupInstanceRole3C026863
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource
  EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupInstanceRole3C026863
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/InstanceProfile
  EcsClusterDefaultAutoScalingGroupLaunchConfigB7E376C1:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ""
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3
      SecurityGroups:
        - Fn::GetAtt:
            - EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: EcsCluster97242B84
              - >-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP

                sudo service iptables save

                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80
      - EcsClusterDefaultAutoScalingGroupInstanceRole3C026863
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/LaunchConfig
  EcsClusterDefaultAutoScalingGroupASGC1A785DB:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: EcsClusterDefaultAutoScalingGroupLaunchConfigB7E376C1
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup
      VPCZoneIdentifier:
        - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
        - Ref: MyVpcPrivateSubnet2Subnet0040C983
        - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/ASG
  EcsClusterDefaultAutoScalingGroupDrainECSHookTopicC705BD25:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Topic/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - lambda.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - autoscaling:CompleteLifecycleAction
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
              - ecs:DescribeContainerInstances
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          import boto3, json, os, time


          ecs = boto3.client('ecs')

          autoscaling = boto3.client('autoscaling')



          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: EcsCluster97242B84
      Tags:
        - Key: Name
          Value: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup
      Timeout: 310
    DependsOn:
      - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396
      - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionTopicSubscriptionDA5F8A10:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: EcsClusterDefaultAutoScalingGroupDrainECSHookTopicC705BD25
      Endpoint:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E
          - Arn
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/TopicSubscription/Resource
  EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionTopicE6B1EBA6:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: EcsClusterDefaultAutoScalingGroupDrainECSHookTopicC705BD25
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic
  EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - autoscaling.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource
  EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: EcsClusterDefaultAutoScalingGroupDrainECSHookTopicC705BD25
        Version: "2012-10-17"
      PolicyName: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88
      Roles:
        - Ref: EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookFFA63029:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: EcsClusterDefaultAutoScalingGroupASGC1A785DB
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: EcsClusterDefaultAutoScalingGroupDrainECSHookTopicC705BD25
      RoleARN:
        Fn::GetAtt:
          - EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B
          - Arn
    DependsOn:
      - EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88
      - EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource
  TaskDefTaskRole1EDB4A67:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/TaskDef/TaskRole/Resource
  TaskDef54694570:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::Join:
                            - ""
                            - - "arn:"
                              - Ref: AWS::Partition
                              - ":ecr:"
                              - Ref: AWS::Region
                              - ":"
                              - Ref: AWS::AccountId
                              - :repository/
                              - Fn::GetAtt:
                                  - ImageAdoptRepositoryE1E84E35
                                  - RepositoryName
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::Join:
                            - ""
                            - - "arn:"
                              - Ref: AWS::Partition
                              - ":ecr:"
                              - Ref: AWS::Region
                              - ":"
                              - Ref: AWS::AccountId
                              - :repository/
                              - Fn::GetAtt:
                                  - ImageAdoptRepositoryE1E84E35
                                  - RepositoryName
                - .amazonaws.com/
                - Fn::GetAtt:
                    - ImageAdoptRepositoryE1E84E35
                    - RepositoryName
                - "@sha256:"
                - Fn::Select:
                    - 1
                    - Fn::Split:
                        - "@sha256:"
                        - Ref: ImageImageName5E684353
          Links:
            - xray
          Memory: 512
          MountPoints: []
          Name: primary
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: tcp
          Ulimits: []
          VolumesFrom: []
        - Essential: false
          Image: amazon/aws-xray-daemon
          Links: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: ServiceLoggingLogGroupC3D6A581
              awslogs-stream-prefix: Service
              awslogs-region:
                Ref: AWS::Region
          MemoryReservation: 256
          MountPoints: []
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              HostPort: 0
              Protocol: tcp
          Ulimits: []
          VolumesFrom: []
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskDefExecutionRoleB4775C97
          - Arn
      Family: awsecsxraynoprotocolTaskDef31119970
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - TaskDefTaskRole1EDB4A67
          - Arn
      Volumes: []
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/TaskDef/Resource
  TaskDefExecutionRoleB4775C97:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ecs-tasks.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/TaskDef/ExecutionRole/Resource
  TaskDefExecutionRoleDefaultPolicy0DBB737A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::GetAtt:
                      - ImageAdoptRepositoryE1E84E35
                      - RepositoryName
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ServiceLoggingLogGroupC3D6A581
                - Arn
        Version: "2012-10-17"
      PolicyName: TaskDefExecutionRoleDefaultPolicy0DBB737A
      Roles:
        - Ref: TaskDefExecutionRoleB4775C97
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/TaskDef/ExecutionRole/DefaultPolicy/Resource
  ImageAdoptRepositoryE1E84E35:
    Type: Custom::ECRAdoptedRepository
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c52BE89E9
          - Arn
      RepositoryName:
        Fn::Select:
          - 0
          - Fn::Split:
              - "@sha256:"
              - Ref: ImageImageName5E684353
    DependsOn:
      - AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleDefaultPolicy6BC8737C
      - AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleD788AA17
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/Image/AdoptRepository/Resource/Default
  AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleD788AA17:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - lambda.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c/ServiceRole/Resource
  AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleDefaultPolicy6BC8737C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:GetRepositoryPolicy
              - ecr:SetRepositoryPolicy
              - ecr:DeleteRepository
              - ecr:ListImages
              - ecr:BatchDeleteImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/
                  - Fn::Select:
                      - 0
                      - Fn::Split:
                          - "@sha256:"
                          - Ref: ImageImageName5E684353
        Version: "2012-10-17"
      PolicyName: AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleDefaultPolicy6BC8737C
      Roles:
        - Ref: AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleD788AA17
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c/ServiceRole/DefaultPolicy/Resource
  AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c52BE89E9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cCodeS3Bucket92AB06B6
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cCodeS3VersionKey393B7276
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cCodeS3VersionKey393B7276
      Handler: handler.handler
      Role:
        Fn::GetAtt:
          - AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleD788AA17
          - Arn
      Runtime: nodejs8.10
      Timeout: 300
    DependsOn:
      - AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleDefaultPolicy6BC8737C
      - AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cServiceRoleD788AA17
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c/Resource
      aws:asset:path: .cdk.staging/ea7034d81c091be1158bcd85b4958dc86ec6672c345be27607d68fdfcf26b1c1
      aws:asset:property: Code
  ServiceD69D759B:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: TaskDef54694570
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers: []
      SchedulingStrategy: REPLICA
      ServiceRegistries: []
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/Service/Service
  ServiceLoggingLogGroupC3D6A581:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: aws-ecs-xray-no-protocol/Service/Logging/LogGroup/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=0.32.0,jsii-runtime=node.js/v12.1.0
Parameters:
  ImageImageName5E684353:
    Type: String
    Description: ECR repository name and tag asset "aws-ecs-xray-no-protocol/Image"
  AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cCodeS3Bucket92AB06B6:
    Type: String
    Description: S3 bucket for asset
      "aws-ecs-xray-no-protocol/AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c/Code"
  AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cCodeS3VersionKey393B7276:
    Type: String
    Description: S3 key for asset version
      "aws-ecs-xray-no-protocol/AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c/Code"
  AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62cCodeArtifactHash8BCBAA49:
    Type: String
    Description: Artifact hash for asset
      "aws-ecs-xray-no-protocol/AdoptEcrRepositorydbc60defc59544bcaa5c28c95d68f62c/Code"

